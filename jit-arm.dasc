/* JIT for Brainf*ck */

#include <stdint.h>
#include "util.h"

|.arch arm
|.actionlist actions
|
|// Use r4 as our cell pointer.
|// Since r4 is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, r4

#define Dst &state
#define MAX_NESTING 256

int main(int argc, char *argv[]) {
  if (argc < 2) err("Usage: jit-arm <inputfile>");
  dasm_State *state;
  initjit(&state, actions);

  unsigned int maxpc = 0;
  int pcstack[MAX_NESTING];
  int *top = pcstack, *limit = pcstack + MAX_NESTING;

  printf("limit = %d, top = %d, maxpc = %d\n", *limit, *top, maxpc);

  // Function prologue.
  | push {lr}

  for (char *p = read_file(argv[1]); *p; p++) {
    switch (*p) {
      case '>':
        |  add PTR, PTR, #1
        break;
      case '<':
        |  sub PTR, PTR, #1
        break;
      case '+':
        |  ldrb r5, [PTR]
        |  add r5, r5, #1
        |  strb r5, [PTR]
        |  strb r5, [PTR]
        break;
      case '-':
        |  ldrb r5, [PTR]
        |  sub r5, r5, #1
        |  strb r5, [PTR]
        break;
      case '.':
        |  ldr r0 ,= _char
        |  ldrb r1, [r4]
        |  bl putchar
        break;
      case ',':
        |  bl getchar
        |  strb r0, [r4]
        break;
      case '[':
        if (top == limit) err("Nesting too deep.");
        // Each loop gets two pclabels: at the beginning and end.
        // We store pclabel offsets in a stack to link the loop
        // begin and end together.
        maxpc += 2;
        *top++ = maxpc;
        dasm_growpc(&state, maxpc);
        |  cmp  byte [PTR], 0
        |  je   =>(maxpc-2)
        |=>(maxpc-1):
        break;
      case ']':
        if (top == pcstack) err("Unmatched ']'");
        top--;
        |  cmp  byte [PTR], 0
        |  jne  =>(*top-1)
        |=>(*top-2):
        break;
    }
  }

  // Function epilogue.
  |  pop {pc}

  void (*fptr)(char*) = jitcode(&state);
  char *mem = calloc(30000, 1);
#if defined(__GNUC__)
  __builtin___clear_cache((char*) mem, (char*) (mem + sizeof(char) * 30000));
#else
#error "Missing builtin to flush instruction cache"
#endif
  fptr(mem);
  free(mem);
  free_jitcode(fptr);
  return 0;
}
